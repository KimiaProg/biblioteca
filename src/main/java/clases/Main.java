/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.regex.Pattern;

public class Main {

	static Scanner sc = new Scanner(System.in);

	public static void main(String[] args) {
		ArrayList<Libro> catalogo = new ArrayList<Libro>();
		while (true) {
			int opcion = menu();
			switch (opcion) {
			case 1:
				alta(catalogo);
				break;
			case 2:
				listaLibro(catalogo);
				break;
			case 3:
				bajaLibro(catalogo);
				break;
			case 4:
				busquedaLibro(catalogo);
				break;
			case 5:
				ordenarLibro(catalogo);
				break;
			case 6:
				salvarFichero(catalogo);
				break;
			case 7:
				leerFichero(catalogo);
				break;
			case 8:
				vaciarCatalogo(catalogo);
				break;
			default:
				break;
			}
		}
	}

	/**
	 * Menu
	 * 
	 * @return
	 */
	private static int menu() {
		int opcion = 0;
		do {
			System.out.println("Opciones:");
			System.out.println("1. Alta de Libro");
			System.out.println("2. Lista de Libros");
			System.out.println("3. Baja de Libros");
			System.out.println("4. Búsqueda de Libros");
			System.out.println("5. Ordenacion de Libros");
			System.out.println("6. Salvar a fichero");
			System.out.println("7. Leer fichero");
			System.out.println("8. Vaciar Catálogo");
			System.out.println("Introduce la opcion:");

			opcion = leerOpcion(8);

		} while (opcion <= 0);

		return opcion;
	}

	/**
	 * Lee la opcion seleccionada
	 * 
	 * @param max
	 * @return
	 */
	private static int leerOpcion(int max) {
		int opcion = -1;
		try {
			opcion = sc.nextInt();
			if (opcion > max) {
				opcion = -1;
			}
		} catch (InputMismatchException e) {
			System.out.println("Opcion incorrecta");
			opcion = -1;
			sc.next();
		}
		return opcion;
	}

	/**
	 * Obtiene los datos por consola
	 * 
	 * @return
	 */
	private static String obtenerDatosLibro() {
		String datos = null;
		boolean validado = false;
		while (!validado) {
			System.out.println("Introduce los datos de los libros");
			System.out.println("Usa el formato \" \" titulo:isbn:genero:autor:paginas(El género será uno de estos tres:"
					+ " poesia,novela,ficcion)");
			datos = leerCadena();
			if (datos.matches(".*:.*:novela:.*:[0-9]+$") || datos.matches(".*:.*:poesia:.*:[0-9]+$")
					|| datos.matches(".*:.*:ficcion:.*:[0-9]+$")) {
				validado = true;
			}
		}
		return datos;
	}

	/**
	 * Convertir los datos libros recogidos po consola en un objeto Libro
	 * 
	 * @param entrada
	 * @return
	 */
	private static Libro procesoEntrada(String entrada) {
		String[] datos;
		// Separando los datos del libro y Hacer el libro del cliente
		datos = entrada.split(":");
		Genero genero = Genero.getGenero(datos[2]);
		;
		Integer pagina = Integer.parseInt(datos[4]);
		;
		Libro libro = new Libro(datos[0], datos[1], genero, datos[3], pagina);
		return libro;
	}

	/**
	 * lee la cadena
	 * 
	 * @return
	 */
	private static String leerCadena() {
		String datos = null;
		datos = sc.next();
		return datos;
	}

	/**
	 * El método para dar de alta a un libro
	 * 
	 * @param catalogo
	 */
	private static void alta(ArrayList<Libro> catalogo) {
		String datosLibro = obtenerDatosLibro();
		catalogo.add(procesoEntrada(datosLibro));
	}

	/**
	 * Para listar los libros existentes
	 * 
	 * @param catalogo
	 */
	private static void listaLibro(ArrayList<Libro> catalogo) {

		if (catalogo.size() == 0) {
			System.out.println("No hay ningún libro registrado");
		} else {
			for (int i = 0; i < catalogo.size(); i++) {
				System.out.println("Libro " + (i + 1) + ": " + catalogo.get(i).toString());
			}
		}

	}

	/**
	 * El método para dar de baja a un libro
	 * 
	 * @param catalogo
	 */
	private static void bajaLibro(ArrayList<Libro> catalogo) {
		boolean validado = false;
		int entrada = 0;
		while (!validado) {
			System.out.println("A qué libro quieres dar de baja? (Escribe la posición del libro)");
			listaLibro(catalogo);
			try {
				entrada = sc.nextInt();
				validado = true;
				if (entrada < 1 || entrada > (catalogo.size())) {
					validado = false;
					System.out.println("Solo tiene que ser un entero entre 1 y " + (catalogo.size()));
				}
			} catch (InputMismatchException e) {
				validado = false;
				sc.next();
				System.out.println("Solo tiene que ser un entero entre 1 y " + (catalogo.size()));
			}
		}

		Libro libro = catalogo.get(entrada - 1);
		catalogo.remove(libro);
		System.out.println("Se ha dado de baja al libro satisfactoriamente");

	}

	/**
	 * El método para buscar un libro y mostrarlo por pantalla
	 * 
	 * @param catalogo
	 */
	private static void busquedaLibro(ArrayList<Libro> catalogo) {
		String entrada = "";

		System.out.println("Qué libro deseas buscar?");
		System.out.println("Escribe el ISBN del libro.");

		entrada = sc.next();
		Libro libro = new Libro();
		libro.setIsbn(entrada);
		int indice = catalogo.indexOf(libro);

		if (indice == -1) {
			System.out.println("No existe este libro en el catálogo.");
		} else {
			libro = catalogo.get(indice);
			System.out.println("El libro se ha encontrado satisfactoriamente");
			System.out.println(
					"Aquí lo tienes: " + libro.toString() + " y está en la posición " + catalogo.indexOf(libro));
		}

	}

	/**
	 * Ordena los libros
	 * 
	 * @param catalogo
	 * @return
	 */
	private static void ordenarLibro(ArrayList<Libro> catalogo) {

		System.out.println("Deseas ordenar la lista de libros por título o por página?(título/página)");
		String entrada = sc.next();
		if (entrada.equalsIgnoreCase("título")) {
			Collections.sort(catalogo);
		} else {
			Libro libro = new Libro();
			Collections.sort(catalogo, libro);
		}
	}

	private static void salvarFichero(ArrayList<Libro> catalogo) {
		boolean formato = true;
		String nomFich;
		// La validación de la entrada que sea con el formato pedido
		do {
			System.out.println("Qué nombre quieres poner al fichero?(nomFich.txt)");
			nomFich = sc.next();
			formato = true;
			if (!nomFich.matches("\\w*.txt")) {
				System.out.println("El formato tiene que ser :nomFich.txt ");
				formato = false;
			}
		} while (formato == false);
		// Creando un objeto fichero
		try {
			File fichero = new File(nomFich);
			// Para saber si existe ya el fichero
			if (fichero.createNewFile()) {
				System.out.println("Archivo creado: " + fichero.getName());
			} else {
				System.out.println("El archivo ya existe.");
			}

			;
			// Para ver si hay algún libro ya guardado en el fichero
			System.out.println("Quieres sobreescribir los libros?(Si,No)");
			String sobreEscribir = sc.next();
			FileWriter myWriter = null;
			if (sobreEscribir.equalsIgnoreCase("si")) {
				// Creando un objeto FileWriter y pasandole el fichero creado
				myWriter = new FileWriter(fichero);
			} else {
				// Creando un objeto FileWriter y pasandole el fichero creado
				myWriter = new FileWriter(fichero, true);
			}
			// Escribiendo el catálogo en el Fichero
			for (int i = 0; i < catalogo.size(); i++) {
				myWriter.write(catalogo.get(i).toStringFile() + "\n");
			}
			System.out.println("Se ha escrito con éxito.");
			myWriter.close();
		} catch (IOException e) {
			System.out.println("Ha ocurrido un error.");
			e.printStackTrace();
		}
	}

	private static void leerFichero(ArrayList<Libro> catalogo) {
		String entrada;
		boolean formato = true;
		// La validación de la entrada que sea con el formato pedido
		do {
			System.out.println("Qué fichero quieres leer?(el nombre del fichero)");
			entrada = sc.next();
			formato = true;
			if (!entrada.matches("\\w*.txt")) {
				System.out.println("El formato tiene que ser :nomFich.txt ");
				formato = false;
			}
		} while (formato == false);
		// Creando un objeto fichero
		File fichero = new File(entrada);
		try {
			// Para saber si existe ya el fichero
			if (fichero.createNewFile()) {
				System.out.println("Archivo creado: " + fichero.getName());
			} else {
				System.out.println("El archivo ya existe.");
			}
			// Con la clase Scanner y sus métodos podemos leer el fichero
			Scanner reader = new Scanner(fichero);
			while (reader.hasNextLine()) {
				String datos = reader.nextLine();
				Libro libro = separarLinea(datos);
				catalogo.add(libro);
			}
			System.out.println("El fichero ya se ha leido");
			reader.close();
		} catch (IOException e) {
			System.out.println("Error");
			e.printStackTrace();
		}
	}

	/**
	 * Método para separar los datos de libro y los separa por coma
	 * 
	 * @param datos
	 * @return duevuelve un objeto Libro creado con los datos
	 */
	private static Libro separarLinea(String datos) {

		Libro libro = null;
		
		if(validarER(datos)==true) {
			String[] datosSepa = datos.split(",");
			Genero genero = Genero.getGenero(datosSepa[2]);
			Integer pagina = Integer.parseInt(datosSepa[4]);
			libro = new Libro(datosSepa[0], datosSepa[1], genero, datosSepa[3], pagina);
		} else {
			System.out.println("Los datos de los libros en el fichero no tienen un formato correcto");
			System.exit(0);
		}
		
		return libro;

	}
	
	private static boolean validarER(String datos) {
		boolean devolver=false;
		//Pattern pat = new Pattern(".*,.*,(NOVELA|novela|POESIA|poesia|FICCION|ficcion),.*,[0-9]+$");
		
		if (datos.matches(".*,.*,(NOVELA|novela),.*,[0-9]+$")
				|| datos.matches(".*,.*,(),.*,[0-9]+$")
				|| datos.matches(".*,.*,(),.*,[0-9]+$")) {
			devolver=true;
		}
		
		return false;
		
	}
	/**
	 * Vacia nuestro catálogo
	 * 
	 * @param catalogo
	 */
	private static void vaciarCatalogo(ArrayList<Libro> catalogo) {
		catalogo.clear();
		System.out.println("Se ha borrado todo el contenido del catálogo");
	}

}
